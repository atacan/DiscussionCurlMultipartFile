// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// - Remark: HTTP `POST /upload-audio`.
    /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)`.
    func uploadAudio(_ input: Operations.uploadAudio.Input) async throws -> Operations.uploadAudio.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `POST /upload-audio`.
    /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)`.
    public func uploadAudio(
        headers: Operations.uploadAudio.Input.Headers = .init(),
        body: Operations.uploadAudio.Input.Body
    ) async throws -> Operations.uploadAudio.Output {
        try await uploadAudio(Operations.uploadAudio.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Production server
    public enum Server1 {
        /// Production server
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.example.com/v1",
                variables: []
            )
        }
    }
    /// Production server
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.example.com/v1",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/UploadRequest`.
        @frozen public enum UploadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/UploadRequest/file`.
            public struct filePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.UploadRequest.filePayload>)
            /// - Remark: Generated from `#/components/schemas/UploadRequest/model`.
            public struct modelPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.UploadRequest.modelPayload>)
        }
        /// - Remark: Generated from `#/components/schemas/AudioResponse`.
        public struct AudioResponse: Codable, Hashable, Sendable {
            /// The transcribed text
            ///
            /// - Remark: Generated from `#/components/schemas/AudioResponse/text`.
            public var text: Swift.String?
            /// Duration of the audio in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/AudioResponse/duration`.
            public var duration: Swift.Double?
            /// Creates a new `AudioResponse`.
            ///
            /// - Parameters:
            ///   - text: The transcribed text
            ///   - duration: Duration of the audio in seconds
            public init(
                text: Swift.String? = nil,
                duration: Swift.Double? = nil
            ) {
                self.text = text
                self.duration = duration
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case duration
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// - Remark: HTTP `POST /upload-audio`.
    /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)`.
    public enum uploadAudio {
        public static let id: Swift.String = "uploadAudio"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/upload-audio/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadAudio.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadAudio.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.uploadAudio.Input.Headers
            /// - Remark: Generated from `#/paths/upload-audio/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/upload-audio/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.UploadRequest>)
            }
            public var body: Operations.uploadAudio.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.uploadAudio.Input.Headers = .init(),
                body: Operations.uploadAudio.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/upload-audio/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/upload-audio/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AudioResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AudioResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadAudio.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadAudio.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful transcription
            ///
            /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.uploadAudio.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.uploadAudio.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Invalid request
            ///
            /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.uploadAudio.Output.BadRequest)
            /// Invalid request
            ///
            /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            public static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.uploadAudio.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                public init() {}
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.uploadAudio.Output.Unauthorized)
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            public static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.uploadAudio.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// Creates a new `InternalServerError`.
                public init() {}
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.uploadAudio.Output.InternalServerError)
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//upload-audio/post(uploadAudio)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            public static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.uploadAudio.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
